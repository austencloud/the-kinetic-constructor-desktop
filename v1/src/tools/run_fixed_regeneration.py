#!/usr/bin/env python3
"""
Run Fixed Dictionary Regeneration

This script provides a simple way to execute the fixed dictionary regeneration
from within the application context.

CRITICAL DISCOVERY:
The SequenceCardImageExporter works because it:
1. Creates a TempBeatFrame (which has a mock ImageExportManager)
2. REPLACES the mock with a real ImageExportManager
3. Uses the real image creation pipeline

This is exactly what our fixed regenerator does.

USAGE:
======
From within the application, execute:

    from tools.run_fixed_regeneration import execute_fixed_regeneration
    execute_fixed_regeneration(main_widget)

This will:
1. Test with 5 images first
2. Ask for manual verification
3. If successful, offer full regeneration of all 437 images
"""


def execute_fixed_regeneration(main_widget):
    """
    Execute the fixed dictionary regeneration with the proven approach.

    Args:
        main_widget: The main widget instance from the application
    """
    print("üé® EXECUTING FIXED DICTIONARY REGENERATION")
    print("=" * 60)
    print("Using the EXACT SequenceCardImageExporter approach...")

    # Validate that we have what we need
    if not _validate_main_widget(main_widget):
        return False

    # Phase 1: Test with 5 images
    print("\nüìã PHASE 1: TEST REGENERATION (5 images)")
    print("-" * 50)

    try:
        from tools.fixed_dictionary_regenerator import test_fixed_regeneration

        print("üöÄ Running test regeneration...")
        success = test_fixed_regeneration(main_widget)

        if success:
            print("‚úÖ Phase 1 test SUCCEEDED!")
            print("üéØ Success rate >80% achieved")
        else:
            print("‚ùå Phase 1 test FAILED!")
            print("üí° Check the error messages above")
            return False

    except Exception as e:
        print(f"‚ùå Phase 1 error: {e}")
        import traceback

        traceback.print_exc()
        return False

    # Manual verification
    print("\nüîç MANUAL VERIFICATION REQUIRED")
    print("-" * 50)
    print("Please check the 5 regenerated images:")
    print("1. Navigate to the dictionary folder")
    print("2. Open 2-3 recently modified images")
    print("3. Verify they contain:")
    print("   ‚úÖ Real kinetic sequence diagrams (stick figures, arrows)")
    print("   ‚úÖ Professional overlays (word names, beat numbers)")
    print("   ‚úÖ Multiple colors and complex graphics")
    print("   ‚ùå NOT blank gray rectangles (240,240,240)")
    print()

    while True:
        verification = (
            input("Do the images contain REAL sequence diagrams? (y/n/help): ")
            .lower()
            .strip()
        )

        if verification == "y":
            print("‚úÖ Manual verification PASSED!")
            break
        elif verification == "n":
            print("‚ùå Manual verification FAILED!")
            print("üí° The regeneration is still creating blank/placeholder images")
            print("üí° The approach may need further debugging")
            return False
        elif verification == "help":
            _show_verification_help()
        else:
            print("Please enter 'y' for yes, 'n' for no, or 'help' for assistance")

    # Phase 2: Full regeneration
    print("\nüìã PHASE 2: FULL REGENERATION (all 437 images)")
    print("-" * 50)

    full_regen = (
        input("Proceed with full regeneration of all 437 images? (y/N): ")
        .lower()
        .strip()
    )
    if full_regen != "y":
        print("‚è∏Ô∏è  Full regeneration cancelled by user")
        print(
            "‚úÖ Phase 1 test was successful - ready for full regeneration when needed"
        )
        return True

    try:
        from tools.fixed_dictionary_regenerator import full_fixed_regeneration

        print("üöÄ Running full regeneration...")
        print("‚ö†Ô∏è  This may take several minutes...")

        success = full_fixed_regeneration(main_widget)

        if success:
            print("‚úÖ Phase 2 full regeneration SUCCEEDED!")
            print("üéâ All 437 dictionary images regenerated!")
            print("üí° Clear browse tab cache and restart to see new images")
        else:
            print("‚ùå Phase 2 full regeneration FAILED!")
            print("üí° Check the error messages above")
            return False

    except Exception as e:
        print(f"‚ùå Phase 2 error: {e}")
        import traceback

        traceback.print_exc()
        return False

    # Success!
    print("\nüéâ FIXED DICTIONARY REGENERATION COMPLETE!")
    print("=" * 60)
    print("‚úÖ All dictionary images should now contain real kinetic sequence diagrams")
    print("‚úÖ Browse tab should show professional sequence cards")
    print("‚úÖ Success rate >80% achieved")
    print()
    print("NEXT STEPS:")
    print("1. Clear browse tab cache")
    print("2. Restart application if needed")
    print("3. Check browse tab for professional sequence cards")
    print("4. Verify random samples show real kinetic diagrams")

    return True


def _validate_main_widget(main_widget) -> bool:
    """Validate that the main_widget is available."""
    print("üîç Validating main widget...")

    if main_widget is None:
        print("‚ùå main_widget is None")
        print("üí° This function must be called with the actual main_widget instance")
        return False

    print("‚úÖ main_widget validation passed")
    return True


def _show_verification_help():
    """Show detailed help for manual verification."""
    print("\nüìñ VERIFICATION HELP:")
    print("-" * 30)
    print("WHAT TO LOOK FOR:")
    print()
    print("‚úÖ GOOD (Real sequence diagrams):")
    print("   - Complex drawings with stick figures in different poses")
    print("   - Arrows showing movement directions")
    print("   - Beat numbers (1, 2, 3, etc.) on each beat")
    print("   - Reversal symbols (if applicable)")
    print("   - Word name displayed prominently")
    print("   - Difficulty level indicator")
    print("   - Multiple colors and detailed graphics")
    print()
    print("‚ùå BAD (Still broken):")
    print("   - Solid gray rectangles (240, 240, 240 color)")
    print("   - Simple text on plain background")
    print("   - 'Placeholder' or 'Mock' text")
    print("   - Single solid color with minimal content")
    print("   - Missing beat diagrams or stick figures")
    print()


def quick_fixed_test(main_widget):
    """Quick test function for immediate validation."""
    print("üöÄ QUICK FIXED REGENERATION TEST")
    print("=" * 40)

    if not _validate_main_widget(main_widget):
        return False

    try:
        from tools.fixed_dictionary_regenerator import test_fixed_regeneration

        print("üéØ Using fixed approach (TempBeatFrame + real ImageExportManager)...")
        return test_fixed_regeneration(main_widget)

    except Exception as e:
        print(f"‚ùå Quick test error: {e}")
        return False


def show_approach_summary():
    """Show a summary of the fixed approach."""
    print("üîß FIXED APPROACH SUMMARY")
    print("=" * 40)
    print()
    print("PROBLEM IDENTIFIED:")
    print("- TempBeatFrame uses mock ImageExportManager")
    print("- Mock ImageExportManager creates blank gray images")
    print("- Previous regenerators used the mock system")
    print()
    print("SOLUTION DISCOVERED:")
    print("- SequenceCardImageExporter creates TempBeatFrame")
    print("- Then REPLACES mock with real ImageExportManager")
    print("- Real ImageExportManager creates actual sequence diagrams")
    print()
    print("FIXED REGENERATOR:")
    print("- Replicates SequenceCardImageExporter approach exactly")
    print("- Creates TempBeatFrame + real ImageExportManager")
    print("- Uses proven working image creation pipeline")
    print("- Should produce real kinetic sequence diagrams")


if __name__ == "__main__":
    print("This script must be run from within the application context.")
    print("Usage: execute_fixed_regeneration(main_widget)")
    print()
    show_approach_summary()
